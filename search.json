[{"title":"学习篇-11","date":"2021-08-18T13:59:48.522Z","url":"/2021/08/18/Study11/","categories":[["Study","/categories/Study/"]],"content":"Integer缓冲区 前者由于new Integer是引用类型，存储在堆当中。因此比对的是堆中的地址，所以为false。 后者自动装箱或者装箱的时候是通过IntegerCathe里面预先存储的值 如果装箱的值在low~high范围内则直接返回这个IntegerCathe缓存地址，否则在堆中开辟一个新的Integer空间。"},{"title":"学习篇-05","date":"2021-08-18T13:23:30.190Z","url":"/2021/08/18/Study05/","categories":[["Study","/categories/Study/"]],"content":"字符串连接符 + 输出时，“+” 的左右一旦出现字符串的形式，最后输出的就是字符串结果。 上例 “ ” 字符串在左边，则后面的全部安字符串链接；“ ” 字符串在右边，则先按运算符号 “+” 相加，得到的结果再按字符串输出。"},{"title":"学习篇-10","date":"2021-08-16T15:17:29.272Z","url":"/2021/08/16/Study10/","categories":[["Study","/categories/Study/"]],"content":"内部类 成员内部类 在类的内部定义，与实例变量、构造方法同级别的类。 外部类的一个实例部分，在创建内部类对象时，必须依赖外部类对象。 当外部类、内部类存在重名属性时。会优先访问内部类属性。 成员内部类不能定义静态成员（但是能包含静态常量，一般不这么玩）。 静态内部类 加了个static ，直接在一开始就和其他外部类加载了。 外部对象属性的访问，需要先创建外部类对象实例化才行（和普通类调用其他类的属性一样）。 局部内部类 定义在外部类的方法中，作用范围和创建对象范围仅限于当前的方法。 局部内部类访问外部类当前方法中的局部变量时，因无法保障变量的生命周期与自身相同，变量必须修饰为final（jdk1.8后默认加上final）。 限制类的使用范围 匿名内部类 没有类名的局部内部类（一切特征都与局部内部类相同）。 必须继承一个父类或者实现一个接口 实际上是一个定义类、实现类、创建对象的语法合并，只能创建一个该类对象。 优点：减少代码量；缺点：可读性较差。 "},{"title":"学习篇-09","date":"2021-08-13T15:13:08.669Z","url":"/2021/08/13/Study09/","categories":[["Study","/categories/Study/"]],"content":"关于Super super调用父类的构造方法，必须在构造方法的第一个！ super必须只能出现在子类的方法或者构造方法中！ super和this不能同时调用构造方法！ 特别的如果父类重写了有参构造器（没有写有参构造），那么子类在写无参构造时需要显示地即用super(参数); 表示调用父类构造器。"},{"title":"学习篇-08","date":"2021-08-12T05:53:14.775Z","url":"/2021/08/12/Study08/","categories":[["Study","/categories/Study/"]],"content":"可变参数 JDK1.5开始，Java支持传递同类型的可变参数给一个方法： 在方法声明中，在指定参数类型后加一个省略号（…）。 一个方法中只能指定一个可变参数，它必须是方法的最后一个参数。任何普通的参数必须在它之前声明。 "},{"title":"学习篇-07","date":"2021-07-28T12:54:29.401Z","url":"/2021/07/28/Study07/","categories":[["Study","/categories/Study/"]],"content":"JavaDoc注释 对应路径下，控制台输入javadoc -encoding UTF-8 -charset UTF-8 Doc.java命令生成api文档。 打开IDEA，选择项目，点击工具栏Tools-&gt;Generate JavaDoc，在Other command line arguments:一栏中设置encoding和charset。点击OK，生成api文档。 "},{"title":"学习篇-06","date":"2021-07-26T07:21:13.439Z","url":"/2021/07/26/Study06/","categories":[["Study","/categories/Study/"]],"content":"字符串连接符 + 输出时，**”+”的左右一旦出现字符串的形式，最后输出的就是字符串结果。上例“ “字符串在左边，则后面的全部安字符串链接；“ “字符串在右边，则先按运算符号“+”**相加，得到的结果再按字符串输出。"},{"title":"学习篇-04","date":"2021-07-26T06:46:05.613Z","url":"/2021/07/26/Study04/","categories":[["Study","/categories/Study/"]],"content":"变量作用域 类变量 加了static关机键词 类里面都可以调用 实例变量 类里面 默认初始化 需要通过对象调用 局部变量 方法里面 局部变量必须声明和初始化 对应方法里面调用 常量 常量（Constant）：初始化（initialize）后不能再改变的值！不会变动的值 所谓常量可以理解成一种特殊的变量，它的值被设定后，在程序运行过程中不允许被改变 常量名一般使用大写字符 "},{"title":"Bug篇-01","date":"2021-07-26T04:53:32.359Z","url":"/2021/07/26/Bug01/","categories":[["Bug修复日记","/categories/Bug%E4%BF%AE%E5%A4%8D%E6%97%A5%E8%AE%B0/"]],"content":"Blog文章缩略图显示BUG 问题描述：在md文件开头使用yml语言进行相关设置，在pic一项设置路径后发现对应blog文章前缩略图显示异常。 问题发现：找到原作者网页查看教程，发现设置无误，查看其网页源代码。发现生成的index.html文件在相关缩略图代码处显示一行不明代码： 而没有对应缩略图代码被替换。 查找原因：在站点设置文件中（rebirth）查看 index.ejs 文件，发现原因如下： md文件在进行相关yml设置的时候，没有设置title，因此会生成一个fa fa-refresh类从而直接替代了后面的kratos-entry-thumb-new-img类，并不执行。"},{"title":"学习篇-03","date":"2021-07-25T14:30:33.016Z","url":"/2021/07/25/Study03/","categories":[["Study","/categories/Study/"]],"content":"Java里面数值转换值得注意的点 上述代码 num_one*num_two存在数值溢出，在num_thr（long）接受之前已经数值溢出，所以输出结果仍会报错！！！"},{"title":"学习篇-02","date":"2021-07-25T06:39:06.502Z","url":"/2021/07/25/Study02/","categories":[["Study","/categories/Study/"]],"content":"Java里的数据类型 前言计算机语言一般分为强类型语言和弱类型语言：强类型语言（强类型定义语言）指要求变量的使用要严格符合规定，所有变量都必须先定义后才能使用，弱类型语言与之相反，而Java属于强类型语言。 基本类型（primitive type）数值类型 类型名称 整数类型 byte（1byte） short(2byte) int(4byte) long(8byte) 浮点类型 float(4byte) double(8byte) 字符类型 char(2byte) 拓展： 整数拓展：二进制0b后缀 八进制0后缀 十六进制0x后缀 浮点数拓展：浮点数是有限的，离散的，存在舍入误差。举例：银行业务怎么表示？注意，不能用浮点数来进行数值操作，而是采用BigDecimal（大数类型）这个类来处理。 字符拓展： Boolean类型boolean类型占1位其值只有true和false两个 拓展： 下列代码一样 引用类型（reference type）类接口数组"},{"title":"学习篇-01","date":"2021-07-24T06:26:42.661Z","url":"/2021/07/24/Study01/","categories":[["Study","/categories/Study/"]],"content":"通过hexo搭建个人blog部署到github 相关工具下载1、下载 git for windows 什么是git for win: git 根源于用于Linux内核的开发环境中，是一种版本控制系统（vcs)，而git for windows 则是基于windows系统下的版本 控制系统。 下载链接：  或者直接搜索git for windows 下载配置： 下载好安装包后，安装到D盘（一般放在D盘），点击next直到遇到下图选项： 这里勾选第二个，然后一直点击next完成安装就可以了。 打开git bash: 在桌面右键点击出现git bash here选项，点击打开，界面如下： 操作命令： 类似于dos命令，这里简单介绍几个命令—— “cd”打开文件夹，比如“cd空格d:”是打开D盘，“cd空格文件夹名”是打开对应文件夹，“cd..”返回上一级文件夹 “pwd”查看当前所在路径 git库初始化： 在git bash 界面输入：git init 命令 2、下载node 下载地址：  或者搜索node，进入官网 点击左边的长期支持版本（LTS）： 下载完开始安装，选择D盘 点击**Add to PATH(添加环境变量)**，点击next直到完成安装。 检查node和npm： 安装好node后打开git bash 界面，输入以下命令： node -v (查看node版本) npm -v (查看npm版本) 版本号无误即可 3、下载hexo建立blog文件夹 打开git bash 界面，输入 npm install -g hexo-cli命令（下载时间可能有点久），下载完成后输入hexo -v命令 查看hexo版本信息，比如下图： 在D盘建立一个blog文件夹，然后我们就可以进行hexo的初始化了，步骤如下： 打开git bash 进入到blog文件夹下面，输入hexo init命令（需要等待一会），然后输入ls -l命令或者直接找到blog文件夹就可以看到生成的blog文件了： Github部署1、github账号注册百度搜索github进入官网（戳这里），可以使用QQ等注册账户 2、ssh配置 打开 git bash 输入 ssh-keygen -t rsa -C “用于注册github账号的邮箱” 命令，然后一直回车即可。 通过git bash 刚才的生成界面可以查看到生成的文件路径： 然后文本打开后缀为pub的文件，选择复制里面的所有内容。 打开github账户，点击个人头像点击Settings选项，在左侧找到 SSH and GPG keys 选项点击，在界面右上角new一个ssh钥匙： 将第二步里面复制的文本粘贴到key那一栏中，title随便取一个名字就好，最后add ssh key。 将blog部署到github1、检查本地blog是否布置成功因为hexo自带一个blog模板，因此可以通过git bash进入blog路径下输入 hexo s 命令（注意！之后的操作都是在blog文件路径下，如果出现了什么不可以解决的问题，直接删除blog文件夹，然后重新建立blog文件重复之前的操作即可）： 打开浏览器输入上图网址即可查看本地布置的预览效果。 2、将blog部署到github 打开github账号new一个新的仓库： 接着填写repository name，注意这里必须填写你的github用户名+ .github + .io，然后点击create创建好一个空仓库，然后就不用管了。 配置_config.yml文件： _config.yml文件是blog设置的主要文件，我们通过git bash打开进入到blog文件下，输入 vim _config.yml命令或者直接在电脑上文本打开 _config.yml文件，找到Deployment修改: 往上找到URL在url一行修改： 最后保存，接着下一步 hexo d 部署： 打开git bash输入 git config –global user.email “你github注册的邮箱” 命令 然后接着输入 git config –global user.name “你github的用户名” 最后进入blog路径下输入 npm install hexo-deployer-git –save命令(下载插件) 然后输入 hexo g 命令（编译一边生成静态网页） 最后输入 hexo d 命令，一键部署到github上面 查看你的blog： 打开网页输入你的github用户名.github.io就可以查看你的blog了，同时你的github对应仓库的代码也会出现更新。 关于更换主题和_config.yml文件1、关于更换theme 因为这里hexo的主题是自带的，有需求的小伙伴可以在网上比如hexo官网找到一些开源的主题模板，地址如下：  我们将文件下载到blog/themes下面，在themes里新建一个文件夹，文件夹名字为你给下载的主题模板随便起的名字（英文）。 打开_config.yml文件，找到Extensions的theme修改： 保存进行下一步 打开git bash: 进入到blog路径下，依次输入以下命令： hexo clean（清理文件） hexo g（重新编译下） hexo d（部署到github） 2、关于_config.yml_config.yml文件是blog的主题设置的地方，以后对blog进行修改完善都需要对 _config.yml文件设置 "}]